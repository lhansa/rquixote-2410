---
title: "Este es el ecosistema R que uso en el trabajo"
subtitle: "Herramientas del mundo R que uso, que debería usar mejor y que no uso pero me gustaría"
author: "Leonardo Hansa - Ebiquity"
date: 10/03/2024
date-format: "D/M/YYYY"
format: 
  revealjs: 
    theme: 
      - simple
      - custom.scss
    logo: img/Ebiquity_Logo.png
    transition: slide
execute: 
  eval: false
  echo: true
---


# ¿Quién toma café en casa?

```{r}
#| label: libs
#| eval: true
#| echo: false
library(ggplot2)
library(dplyr)
library(tidyr)

theme_set(theme_bw())

main_color <- "#001c54"

```

## ¿Qué cafetera prefieres?

:::: {.columns}

::: {.column width="50%"}
![](img/cafetera-italiana.png)
:::

::: {.column width="50%"}
![](img/nespresso.png)
:::

::::

# Contexto

## Si inviertes 10 millones en publicidad, ¿de qué te sirve?

- Empresa _A_ invierte dinero en publicidad. 
    - Controla a ojo si las ventas suben o bajan un poco después. 
- Empresa _A_ quiere saber **cuántas** ventas ha conseguido gracias a la publicidad.
- Ebiquity le da una aproximación que obtiene con modelos estadísticos.

## Observación: esta charla no va de econometría

Lo que voy a hacer es contarte el papel de R en ese tipo de proyectos que hacemos.

## ¿Quién hace los modelos? El consultor _B_

- El consultor _B_ sabe estadística
- El consultor _B_ sabe de publi
- El consultor _B_ sabe Excel
- El consultor _B_ puede saber programar

Pero no se dedica a automatizar tareas ni a procesar ficheros complejos.

## De eso a lo que no se dedica el consultor _B_ es de lo que te voy a hablar

## Las técnicas estadísticas son casi siempre las mismas de proyecto a proyecto

- Modelos con datos de panel
- Bayesianos
- Con coeficientes dinámicos
- Búsqueda de hiperparámetros
- Transformaciones de variables

## Las tareas repetitivas se desarrollan con herramientas internas

El ecosistema de estas herramientas es lo que te voy a contar ahora.

# Qué te voy a contar

- Planteamiento del ecosistema `ebverse`
- Detalles del ecosistema `ebverse`
- Papel de Shiny en el ecosistema
- Cuál es la única cosa que echo en falta


# Planteamiento del ecosistema

## Los consultores usan Excel

![XSec - Una plantilla en Excel](img/xsec.PNG)

## En Excel especifican todo lo que R necesita saber {.smaller}

| Variable                                                                      | Extra |
|-------------------------------------------------------------------------------|:-----:|
| `log(cci)-log(min(cci,na.rm=TRUE))`                                           |  ...  |
| `gmpc_giveaway_alt`                                                           |  ...  |
| `movav(adstock(dimret(.TV.,160,rescale=FALSE),0.3,normalize=TRUE),1)`         |  ...  |
| `adstock(m_drms_rd_spnd,0.3)`                                                 |  ...  |
| `lag(bh_xmas, 1)`                                                             |  ...  |
| `(OBS == "2015-12-14")`                                                       |  ...  |
| `...`                                                                         |  ...  |


## Excel usa Visual Basic

```{verbatim}
RScriptLoc = """" & gwsRSpec.Range("location_RProg").Value & "\library\ebcore\estimate_model.R"""

cmdline = """" & RLocation & """" & " " & RScriptLoc & " """ & workdir & """ """ & "" & """ """ & xsec_version & "" & """ """ & bayes_model & "" & """ """ & API_KEY & "" & """ """ & API_SECRET & """"

shellAndWait cmdline, True
```

## ¿Conoces `Rscript` y commandArgs()`?

```{r}
#| label: command-args
#| eval: false
message("Esto contiene el objeto commandArgs():")
commandArgs()

message("Y puedo utilizar sus elementos:")
toupper(commandArgs()[6])
```

## `Rscript` lo usas desde línea de comandos

```{bash}
$ Rscript.exe ejemplo-commands.R "mensaje para editar"
```

```{verbatim}
Esto contiene el objeto commandArgs():
[1] "C:/Program Files/R/R-4.4.1/bin/x64/Rterm.exe"
[2] "--no-echo"
[3] "--no-restore"
[4] "--file=ejemplo-commands.R"
[5] "--args"
[6] "mensaje para editar"
Y puedo utilizar sus elementos:
[1] "MENSAJE PARA EDITAR"
```


## Nuestro ecosistema consiste en varias librerías de R a las que Excel llama para cada tarea


# Me llamo Leonardo Hansa y tengo una cosa para ti {.custom-title}


## Me presento {.custom-title}

- No sé mucha estadística 
- No soy buen programador
- Me dedico a las cosas que los buenos estadísticos y programadores tienen que hacer pero no quieren

## Me gusta enseñar cómo con poquito se puede hacer mucho {.custom-title}

https://leonardohansa.com/rquixote


# `ebverse`

## ¿Quién ha creado alguna librería de R?

## Los proyectos de modelización giran en torno a la _Cross Sectional Tool..._

![XSec - Una plantilla en Excel](img/xsec.PNG)

## ..que necesita de R para funcionar

```{r}
#| label: ebcore-run-model
remove(list = ls())
necessary_packages <- c(
  "aws.s3",
  "data.table",
  "devtools",
  "dplyr",
  "remotes",
  "stringr",
  "tidyr"
)
for (package in necessary_packages) {
  if (length(find.package(package, quiet = TRUE)) == 0) {
    install.packages(
      package,
      lib = .Library,
      repos = "https://cloud.r-project.org"
    )
  }
}

suppressPackageStartupMessages(library(dplyr))


xsec_version <- commandArgs()[8]
if (!is.na(xsec_version)) {
  xsec_version <- numeric_version(xsec_version)
}


packageStartupMessage("==============================================================")
## Logo -----------------------------------------------
packageStartupMessage("
 _       _   ______   _______   _______
  |_   _|   |        |         |
    |_|     |_____   |_______  |
   _| |_          |  |         |
 _|     |_  ______|  |_______  |_______
  ")
if (length(find.package("XSEXCELR", quiet = TRUE)) != 0) {
  packageStartupMessage(paste0("Package ", "v.", packageVersion("XSEXCELR")))
}

packageStartupMessage(paste0("Template ", "v.", xsec_version))
packageStartupMessage("==============================================================")



## Check package versions -----------------------------------------------
writeLines("\nChecking Package Versions ...")

tryCatch(
  {
    ebcore::update_packages(xsec_version)
  },
  error = function(e) {}
)

## Load packages and options ---------------------------------------
suppressPackageStartupMessages(library(eble, quietly = TRUE))
suppressPackageStartupMessages(library(dplyr, quietly = TRUE))
suppressWarnings(suppressPackageStartupMessages(library(XSEXCELR)))
suppressPackageStartupMessages(library(methods, quietly = TRUE))
suppressPackageStartupMessages(library(lubridate, quietly = TRUE))

options(
  error = XSEXCELR:::xsec_error_function,
  verbose_xsec = TRUE,
  datatable.old.fread.datetime.character = TRUE
)





## Get name of working directory --------------------------------------------
spec_dir <- XSEXCELR:::get_spec_dir(cmdarg = commandArgs())
decomp_choice <- commandArgs()[7]
bayes_model <- commandArgs()[9]
access_key <- commandArgs()[10]
secret_access_key <- commandArgs()[11]
if (decomp_choice == "" || is.na(decomp_choice)) {
  decomp_choice <- NA
}

## Log warnings---------------------------------------------------------------
warning_file <- file(sprintf("%s/RScriptErrors.log", spec_dir), open = "wt")

sink(warning_file, type = "message")

if (file.exists(sprintf("%s/Done.csv", spec_dir)) && interactive()) {
  # Normally deleted by xsec tool to signal when it's safe to save output
  file.remove(sprintf("%s/Done.csv", spec_dir))
}


if (is.na(bayes_model)) {
  bayes_model <- FALSE
} else if (bayes_model == "True") {
  bayes_model <- TRUE
} else {
  bayes_model <- FALSE
}


if (!is.na(decomp_choice)) {
  run_decomp <- TRUE
} else {
  run_decomp <- FALSE
}

## Estimate model using spec stored in spec_dir -----------------------------
if (bayes_model) {
  aws_credentials(access_key, secret_access_key)
  MODEL <- bayes_estimate(
    spec_dir = spec_dir,
    save_flag = TRUE,
    log = FALSE
  )
} else {
  MODEL <- XSEXCELR:::wextimate_decomp(
    spec_dir = spec_dir,
    save_flag = TRUE,
    decomp_choice = "",
    run_decomp = run_decomp
  )
}



### Run custom script
spec2 <- XSEXCELR:::.importDecompChoice(spec_dir = spec_dir)

# Check if there is a "Custom Script" setting in the spec2 data frame
if (any(spec2$Setting == "Custom Script")) {
  # Retrieve the script location specified under "Custom Script"
  script_loc <- spec2$Value[spec2$Setting == "Custom Script"]

  # Validate that the script location is not NA and is a non-empty string
  if (!is.na(script_loc) && nzchar(script_loc)) {
    # Split the script location into the file path and any arguments
    script_parts <- trimws(strsplit(script_loc, "--")[[1]])
    script_path <- normalizePath(script_parts[1])

    # Combine arguments if they exist
    script_args <- if (length(script_parts) > 1) {
      paste(shQuote(script_parts[-1]), collapse = " ")
    } else {
      ""
    }

    # Check if the script file exists at the specified path
    if (file.exists(script_path)) {
      writeLines("Running Custom R-Script...")

      # Construct the command to run the R script with arguments
      r_executable <- normalizePath(file.path(R.home("bin"), "Rscript.exe"))
      cmd <- paste(shQuote(r_executable), shQuote(script_path), script_args)

      # Execute the command
      system(cmd)
    } else {
      stop("The specified Custom R script could not be found. If you are using custom arguments, please separate them with two hyphens, i.e. myScript.R --Arg1 --Arg2.")
    }
  }
}


## End message --------------------------------------------------------------
XSEXCELR:::xsec_end_message()
```

## La herramienta transforma variables a partir de la sintaxis R que el usuario ha escrito

```{r}
#| label: multiple-trans
movav(adstock(dim_ret(tv_region1,160,rescale=FALSE),0.3,normalize=TRUE))
```

## Los rendimientos decrecientes son una transformación frecuente en publicidad...

$$
x' = \frac{x}{x + b}
$$

- $x$ es la variable explicativa original
- $b\in \mathbb{R}$ es un parámetro que hay que estimar

## ...que visualmente se traducen en esto

```{r}
#| label: sim-dimret
#| echo: false
#| eval: true

set.seed(114)
nobs <- 200
fechas_con_publi <- 75
asymt <- 4
b1 <- 60
intercept <- 100


data <- data.frame(
  fecha = 1:nobs,
  ruido = rnorm(nobs, 0, 1),
  x = numeric(nobs)
)

data$x[sample(1:nobs, fechas_con_publi, replace = FALSE)] <- 
  rlnorm(fechas_con_publi)

data$xd <- data$x / (data$x + asymt)
data$y <- intercept + b1 * data$xd + data$ruido

mod_dimret <- lm(y ~ xd, data = data)
mod_lineal <- lm(y ~ x, data = data)

data$aportes_lineales <- mod_lineal$coefficients["x"] * data$x
data$aportes_dimret <- mod_dimret$coefficients["xd"] * data$xd

ggplot(data) + 
  geom_point(
    aes(x = x, y = aportes_lineales), 
    shape = 21, col = main_color, fill = "yellow", size = 2
    ) + 
  geom_point(
    aes(x = x, y = aportes_dimret), 
    col = main_color, size = 2
  ) + 
  labs(x = "Inversión", y = "Contribución" ,
       title = "Comportamiento de los rendimientos decrecientes")

```

## En una de nuestras librerías tenemos transformaciones como estas

```{r}
#| label: dim-ret
#| echo: true
#| eval: true
eble::dim_ret
```

## El efecto ad-stock simula el recuerdo publicitario

```{r}
#| label: sim-adstock
#| eval: true
#| echo: false

efectos <- c(0.2, 0.4, 0.8)

l_adstocks <- lapply(efectos, function(ads) {
  eble::adstock(data$xd, p = ads)  
})

new_cols <- paste0("xd_ads", as.character(efectos * 100))

data[, new_cols] <- l_adstocks 

data |> 
  select(fecha, starts_with("xd")) |> 
  pivot_longer(-fecha) |> 
  ggplot() + 
  geom_line(aes(x = fecha, y = value), linewidth = 1, col = main_color) + 
  facet_grid(name ~ .) + 
  labs(
    x = "Tiempo", y = "Métrica", 
    title = "El efecto ad-stock extiende el valor de la métrica hacia adelante", 
    subtitle = "La idea es simular un recuerdo"
  )
```

## Para este efecto también tenemos función en la librería eble

```{r}
#| label: adstock
#| echo: true
#| eval: true

eble::adstock
```

## Otra librería tiene wrappers de funciones más típicas

```{r}
#| label: safe-left-join
#| echo: true
#| eval: true

ebility::safe_left_join
```

## Súper cómodo para intercambiar R y Excel

```{r}
#| label: clipboard
#| echo: true
#| eval: true

ebility::clipboard
```



## Librerías en ebverse 

:::: {.columns}

::: {.column width="50%"}
- **eble**
- **ebility**
- **XSEXCELR** 
- **debcomp** 
- **ebjobs** 
:::

::: {.column width="50%"}
- **ebcore** 
- **ebdb** 
- **mediaconsolidator** 
- **roicalculator** 
:::

::::


## Unos comentarios

::: {.incremental}

- Casi todas las librerías las usamos como backends de las interfaces en Excel
- Algunas como **eble** las usamos para procesamiento de datos directamente con código
  + Pero pocas
  
:::

## Qué hacemos mal

- Tests 
- Git / GitHub

## Hacemos muy pocos tests

![](img/tests-rodolfo.PNG)

## En un test realizas operaciones cuyo resultado conoces {.smaller}

Cada vez que editas tu librería, ejecutas todos los tests para garantizar que lo nuevo no rompe lo que ya funcionaba

```{r}
#| label: ejemplo-test
# Load the testthat package and the package that contains the function
library(testthat)
library(rodolfo)

# Create a test block
test_that("apply_adstock works correctly", {


  # Test the output of the function with the example data
  m_adstock <- apply_adstock(loaded_excel_test,
                             c(target_name, variables_in_model))


  expect_type(m_adstock, "double")
  expect_equal(ncol(m_adstock), length(variables_in_model)+1)

  expect_equal(m_adstock, m_adstock_test)


})
```


## Alojamos todo en GitHub, pero nos cuesta seguir nuestras propias pautas {.smaller}

![](img/pull-request.PNG)


# Shiny

## ¿Quién ha hecho un shiny alguna vez?

## Nos da pereza infinita meter cambios en las plantillas de Excel. 

Shiny es nuestra herramienta para ampliar funcionalidades

## Excel carga las Shiny Apps con lo que hemos visto sobre `Rscript.exe`

```{r}
#| label: load-shiny
### Launch App

# Set Model Directory -----------------------------------------------------

if (interactive()) {

  path_to_data <- "C:/.XSEXCELR/leo"

} else {

  path_to_data <- commandArgs()[7]

}

# Set Default Browser -----------------------------------------------------
if (file.exists('C:/Program Files/Google/Chrome/Application/chrome.exe')){

  options(browser = 'C:/Program Files/Google/Chrome/Application/chrome.exe')

} else if (file.exists('C:/Program Files (x86)/Google/Chrome/Application/chrome.exe')){

  options(browser = 'C:/Program Files (x86)/Google/Chrome/Application/chrome.exe')

} else {

  writeLines('Install Chrome!')
  Sys.sleep(5)
  stop('Install Chrome!')

}


# Set Shiny App Source ----------------------------------------------------
shinyDir = paste0(.Library, "/rosalind/")
# rosalind::XsecGa$debug("fit_model_round")
# debugonce(XSEXCELR::check_cache)
rosalind::launch(shinyDir, path2dat = path_to_data,
                 launch.browser = TRUE, quiet = TRUE)

```

 

## Shiny apps como librerías de R

Todas nuestras apps se inspiran en el marco _golem_ (**más o menos**).

```{r}
#| label: result-explorer-schema
#| echo: false
#| eval: true
fs::dir_tree("C:/Users/Leonardo.Hansa/Documents/tools/rosalind")
```

## ¿Qué es una librería?

![](img/library-folders.PNG)

## Ejemplo 1. Shiny Forecast

![](img/eg_forecast.png)

## Ejemplo 2. Chat Generator

![](img/eg_chart_generator.png)

## Ejemplo 3. Algoritmo genético

![](img/eg_ga.png)

## Ejemplo 4. STL

![](img/eg_stl.png)

## Qué hacemos mal

- renv
- Shiny modules 

## Cada proyecto R es de su padre y de su madre

- Creas una herramienta un día que usa dplyr 0.7.0
- Dos años después creas otra que usa dplyr 1.0.0
- Si usas las dos en el mismo ordenador, la palabra más frecuente de tu consola será `WARNING`.

## ¿Solución? Encapsula (en el pasado) cada herramienta con renv

```{r}
#| label: init-renv
renv::init()
```

## renv usa un fichero renv.lock con un listado muy concreto de librerías y versiones que usas {.smaller}

En lugar de usar la carpeta con librerías de tu versión de R, usará una asociada al proyecto y creada a partir de este fichero.

```{verbatim}
{
  "R": {
    "Version": "4.3.3",
    "Repositories": [
      {
        "Name": "CRAN",
        "URL": "https://cloud.r-project.org"
      }
    ]
  },
  "Packages": {
    "BH": {
      "Package": "BH",
      "Version": "1.84.0-0",
      "Source": "Repository",
      "Repository": "CRAN",
      "Hash": "a8235afbcd6316e6e91433ea47661013"
    },
    "Matrix": {
      "Package": "Matrix",
      "Version": "1.6-5",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "grDevices",
        "graphics",
        "grid",
        "lattice",
        "methods",
        "stats",
        "utils"
      ],
      "Hash": "8c7115cd3a0e048bda2a7cd110549f7a"
    },
    "R6": {
      "Package": "R6",
      "Version": "2.5.1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R"
      ],
      "Hash": "470851b6d5d0ac559e9d01bb352b4021"
    },
    "RColorBrewer": {
      "Package": "RColorBrewer",
      "Version": "1.1-3",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R"
      ],
      "Hash": "45f0398006e83a5b10b72a90663d8d8c"
    },
    "Rcpp": {
      "Package": "Rcpp",
      "Version": "1.0.12",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "methods",
        "utils"
      ],
      "Hash": "5ea2700d21e038ace58269ecdbeb9ec0"
    },
    "RcppTOML": {
      "Package": "RcppTOML",
      "Version": "0.2.2",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "Rcpp"
      ],
      "Hash": "c232938949fcd8126034419cc529333a"
    },
    "anytime": {
      "Package": "anytime",
      "Version": "0.3.9",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "BH",
        "R",
        "Rcpp"
      ],
      "Hash": "74a64813f17b492da9c6afda6b128e3d"
    },
    "arrow": {
      "Package": "arrow",
      "Version": "15.0.1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "R6",
        "assertthat",
        "bit64",
        "cpp11",
        "glue",
        "methods",
        "purrr",
        "rlang",
        "stats",
        "tidyselect",
        "utils",
        "vctrs"
      ],
      "Hash": "117bf4b17bb420d115602b057b1e534a"
    },
    "askpass": {
      "Package": "askpass",
      "Version": "1.2.0",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "sys"
      ],
      "Hash": "cad6cf7f1d5f6e906700b9d3e718c796"
    },
    "assertthat": {
      "Package": "assertthat",
      "Version": "0.2.1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "tools"
      ],
      "Hash": "50c838a310445e954bc13f26f26a6ecf"
    },
    "attempt": {
      "Package": "attempt",
      "Version": "0.3.1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "rlang"
      ],
      "Hash": "d7421bb5dfeb2676b9e4a5a60c2fcfd2"
    },
    "aws.s3": {
      "Package": "aws.s3",
      "Version": "0.3.21",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "aws.signature",
        "base64enc",
        "curl",
        "digest",
        "httr",
        "tools",
        "utils",
        "xml2"
      ],
      "Hash": "a0b873f71741bba67e3bc128d8f09fe3"
    },
    "aws.signature": {
      "Package": "aws.signature",
      "Version": "0.6.0",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "base64enc",
        "digest"
      ],
      "Hash": "0006bcef272aad12f78dd5a85fc7f4fc"
    },
    "backports": {
      "Package": "backports",
      "Version": "1.4.1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R"
      ],
      "Hash": "c39fbec8a30d23e721980b8afb31984c"
    },
    "base64enc": {
      "Package": "base64enc",
      "Version": "0.1-3",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R"
      ],
      "Hash": "543776ae6848fde2f48ff3816d0628bc"
    },
    "bit": {
      "Package": "bit",
      "Version": "4.0.5",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R"
      ],
      "Hash": "d242abec29412ce988848d0294b208fd"
    },
    "bit64": {
      "Package": "bit64",
      "Version": "4.0.5",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "bit",
        "methods",
        "stats",
        "utils"
      ],
      "Hash": "9fe98599ca456d6552421db0d6772d8f"
    },
    "broom": {
      "Package": "broom",
      "Version": "1.0.5",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "backports",
        "dplyr",
        "ellipsis",
        "generics",
        "glue",
        "lifecycle",
        "purrr",
        "rlang",
        "stringr",
        "tibble",
        "tidyr"
      ],
      "Hash": "fd25391c3c4f6ecf0fa95f1e6d15378c"
    },
    "bslib": {
      "Package": "bslib",
      "Version": "0.5.0",
      "Source": "Repository",
      "Repository": "RSPM",
      "Requirements": [
        "R",
        "base64enc",
        "cachem",
        "grDevices",
        "htmltools",
        "jquerylib",
        "jsonlite",
        "memoise",
        "mime",
        "rlang",
        "sass"
      ],
      "Hash": "1b117970533deb6d4e992c1b34e9d905"
    },
    "cachem": {
      "Package": "cachem",
      "Version": "1.0.8",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "fastmap",
        "rlang"
      ],
      "Hash": "c35768291560ce302c0a6589f92e837d"
    },
    "cli": {
      "Package": "cli",
      "Version": "3.6.2",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "utils"
      ],
      "Hash": "1216ac65ac55ec0058a6f75d7ca0fd52"
    },
    "colorspace": {
      "Package": "colorspace",
      "Version": "2.1-0",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "grDevices",
        "graphics",
        "methods",
        "stats"
      ],
      "Hash": "f20c47fd52fae58b4e377c37bb8c335b"
    },
    "commonmark": {
      "Package": "commonmark",
      "Version": "1.9.1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Hash": "5d8225445acb167abf7797de48b2ee3c"
    },
    "config": {
      "Package": "config",
      "Version": "0.3.2",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "yaml"
      ],
      "Hash": "8b7222e9d9eb5178eea545c0c4d33fc2"
    },
    "corrplot": {
      "Package": "corrplot",
      "Version": "0.92",
      "Source": "Repository",
      "Repository": "CRAN",
      "Hash": "fcf11a91936fd5047b2ee9bc00595e36"
    },
    "countrycode": {
      "Package": "countrycode",
      "Version": "1.6.0",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R"
      ],
      "Hash": "08b7058813f13c7a1bb294fea9045e3a"
    },
    "cpp11": {
      "Package": "cpp11",
      "Version": "0.4.7",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R"
      ],
      "Hash": "5a295d7d963cc5035284dcdbaf334f4e"
    },
    "crayon": {
      "Package": "crayon",
      "Version": "1.5.2",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "grDevices",
        "methods",
        "utils"
      ],
      "Hash": "e8a1e41acf02548751f45c718d55aa6a"
    },
    "curl": {
      "Package": "curl",
      "Version": "5.2.1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R"
      ],
      "Hash": "411ca2c03b1ce5f548345d2fc2685f7a"
    },
    "data.table": {
      "Package": "data.table",
      "Version": "1.15.4",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "methods"
      ],
      "Hash": "8ee9ac56ef633d0c7cab8b2ca87d683e"
    },
    "digest": {
      "Package": "digest",
      "Version": "0.6.35",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "utils"
      ],
      "Hash": "698ece7ba5a4fa4559e3d537e7ec3d31"
    },
    "dplyr": {
      "Package": "dplyr",
      "Version": "1.1.4",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "R6",
        "cli",
        "generics",
        "glue",
        "lifecycle",
        "magrittr",
        "methods",
        "pillar",
        "rlang",
        "tibble",
        "tidyselect",
        "utils",
        "vctrs"
      ],
      "Hash": "fedd9d00c2944ff00a0e2696ccf048ec"
    },
    "echarts4r": {
      "Package": "echarts4r",
      "Version": "0.4.5",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "broom",
        "corrplot",
        "countrycode",
        "dplyr",
        "htmltools",
        "htmlwidgets",
        "jsonlite",
        "purrr",
        "rstudioapi",
        "scales",
        "shiny"
      ],
      "Hash": "4247fd6acd3bdb4a481479f469956d2f"
    },
    "ellipsis": {
      "Package": "ellipsis",
      "Version": "0.3.2",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "rlang"
      ],
      "Hash": "bb0eec2fe32e88d9e2836c2f73ea2077"
    },
    "evaluate": {
      "Package": "evaluate",
      "Version": "0.23",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "methods"
      ],
      "Hash": "daf4a1246be12c1fa8c7705a0935c1a0"
    },
    "fansi": {
      "Package": "fansi",
      "Version": "1.0.6",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "grDevices",
        "utils"
      ],
      "Hash": "962174cf2aeb5b9eea581522286a911f"
    },
    "farver": {
      "Package": "farver",
      "Version": "2.1.2",
      "Source": "Repository",
      "Repository": "CRAN",
      "Hash": "680887028577f3fa2a81e410ed0d6e42"
    },
    "fastmap": {
      "Package": "fastmap",
      "Version": "1.1.1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Hash": "f7736a18de97dea803bde0a2daaafb27"
    },
    "fontawesome": {
      "Package": "fontawesome",
      "Version": "0.5.2",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "htmltools",
        "rlang"
      ],
      "Hash": "c2efdd5f0bcd1ea861c2d4e2a883a67d"
    },
    "fs": {
      "Package": "fs",
      "Version": "1.6.3",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "methods"
      ],
      "Hash": "47b5f30c720c23999b913a1a635cf0bb"
    },
    "generics": {
      "Package": "generics",
      "Version": "0.1.3",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "methods"
      ],
      "Hash": "15e9634c0fcd294799e9b2e929ed1b86"
    },
    "glue": {
      "Package": "glue",
      "Version": "1.7.0",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "methods"
      ],
      "Hash": "e0b3a53876554bd45879e596cdb10a52"
    },
    "golem": {
      "Package": "golem",
      "Version": "0.4.1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "attempt",
        "config",
        "here",
        "htmltools",
        "rlang",
        "shiny",
        "utils",
        "yaml"
      ],
      "Hash": "dc12172dc35c6c80e18b430dc546fc24"
    },
    "here": {
      "Package": "here",
      "Version": "1.0.1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "rprojroot"
      ],
      "Hash": "24b224366f9c2e7534d2344d10d59211"
    },
    "highr": {
      "Package": "highr",
      "Version": "0.10",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "xfun"
      ],
      "Hash": "06230136b2d2b9ba5805e1963fa6e890"
    },
    "htmltools": {
      "Package": "htmltools",
      "Version": "0.5.8",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "base64enc",
        "digest",
        "fastmap",
        "grDevices",
        "rlang",
        "utils"
      ],
      "Hash": "149431ee39aba5bdc264112c8ff94444"
    },
    "htmlwidgets": {
      "Package": "htmlwidgets",
      "Version": "1.6.4",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "grDevices",
        "htmltools",
        "jsonlite",
        "knitr",
        "rmarkdown",
        "yaml"
      ],
      "Hash": "04291cc45198225444a397606810ac37"
    },
    "httpuv": {
      "Package": "httpuv",
      "Version": "1.6.14",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "R6",
        "Rcpp",
        "later",
        "promises",
        "utils"
      ],
      "Hash": "16abeb167dbf511f8cc0552efaf05bab"
    },
    "httr": {
      "Package": "httr",
      "Version": "1.4.7",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "R6",
        "curl",
        "jsonlite",
        "mime",
        "openssl"
      ],
      "Hash": "ac107251d9d9fd72f0ca8049988f1d7f"
    },
    "jquerylib": {
      "Package": "jquerylib",
      "Version": "0.1.4",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "htmltools"
      ],
      "Hash": "5aab57a3bd297eee1c1d862735972182"
    },
    "jsonlite": {
      "Package": "jsonlite",
      "Version": "1.8.8",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "methods"
      ],
      "Hash": "e1b9c55281c5adc4dd113652d9e26768"
    },
    "knitr": {
      "Package": "knitr",
      "Version": "1.45",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "evaluate",
        "highr",
        "methods",
        "tools",
        "xfun",
        "yaml"
      ],
      "Hash": "1ec462871063897135c1bcbe0fc8f07d"
    },
    "labeling": {
      "Package": "labeling",
      "Version": "0.4.3",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "graphics",
        "stats"
      ],
      "Hash": "b64ec208ac5bc1852b285f665d6368b3"
    },
    "later": {
      "Package": "later",
      "Version": "1.3.2",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "Rcpp",
        "rlang"
      ],
      "Hash": "a3e051d405326b8b0012377434c62b37"
    },
    "lattice": {
      "Package": "lattice",
      "Version": "0.22-5",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "grDevices",
        "graphics",
        "grid",
        "stats",
        "utils"
      ],
      "Hash": "7c5e89f04e72d6611c77451f6331a091"
    },
    "lifecycle": {
      "Package": "lifecycle",
      "Version": "1.0.4",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "cli",
        "glue",
        "rlang"
      ],
      "Hash": "b8552d117e1b808b09a832f589b79035"
    },
    "lubridate": {
      "Package": "lubridate",
      "Version": "1.9.3",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "generics",
        "methods",
        "timechange"
      ],
      "Hash": "680ad542fbcf801442c83a6ac5a2126c"
    },
    "magrittr": {
      "Package": "magrittr",
      "Version": "2.0.3",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R"
      ],
      "Hash": "7ce2733a9826b3aeb1775d56fd305472"
    },
    "memoise": {
      "Package": "memoise",
      "Version": "2.0.1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "cachem",
        "rlang"
      ],
      "Hash": "e2817ccf4a065c5d9d7f2cfbe7c1d78c"
    },
    "mime": {
      "Package": "mime",
      "Version": "0.12",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "tools"
      ],
      "Hash": "18e9c28c1d3ca1560ce30658b22ce104"
    },
    "munsell": {
      "Package": "munsell",
      "Version": "0.5.1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "colorspace",
        "methods"
      ],
      "Hash": "4fd8900853b746af55b81fda99da7695"
    },
    "openssl": {
      "Package": "openssl",
      "Version": "2.1.2",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "askpass"
      ],
      "Hash": "ea2475b073243d9d338aa8f086ce973e"
    },
    "pillar": {
      "Package": "pillar",
      "Version": "1.9.0",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "cli",
        "fansi",
        "glue",
        "lifecycle",
        "rlang",
        "utf8",
        "utils",
        "vctrs"
      ],
      "Hash": "15da5a8412f317beeee6175fbc76f4bb"
    },
    "pkgconfig": {
      "Package": "pkgconfig",
      "Version": "2.0.3",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "utils"
      ],
      "Hash": "01f28d4278f15c76cddbea05899c5d6f"
    },
    "png": {
      "Package": "png",
      "Version": "0.1-8",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R"
      ],
      "Hash": "bd54ba8a0a5faded999a7aab6e46b374"
    },
    "promises": {
      "Package": "promises",
      "Version": "1.2.1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R6",
        "Rcpp",
        "fastmap",
        "later",
        "magrittr",
        "rlang",
        "stats"
      ],
      "Hash": "0d8a15c9d000970ada1ab21405387dee"
    },
    "purrr": {
      "Package": "purrr",
      "Version": "1.0.2",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "cli",
        "lifecycle",
        "magrittr",
        "rlang",
        "vctrs"
      ],
      "Hash": "1cba04a4e9414bdefc9dcaa99649a8dc"
    },
    "rappdirs": {
      "Package": "rappdirs",
      "Version": "0.3.3",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R"
      ],
      "Hash": "5e3c5dc0b071b21fa128676560dbe94d"
    },
    "renv": {
      "Package": "renv",
      "Version": "1.0.7",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "utils"
      ],
      "Hash": "397b7b2a265bc5a7a06852524dabae20"
    },
    "reticulate": {
      "Package": "reticulate",
      "Version": "1.36.1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "Matrix",
        "R",
        "Rcpp",
        "RcppTOML",
        "graphics",
        "here",
        "jsonlite",
        "methods",
        "png",
        "rappdirs",
        "rlang",
        "utils",
        "withr"
      ],
      "Hash": "e037fb5dc364efdaf616eb6bc05aaca2"
    },
    "rlang": {
      "Package": "rlang",
      "Version": "1.1.3",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "utils"
      ],
      "Hash": "42548638fae05fd9a9b5f3f437fbbbe2"
    },
    "rmarkdown": {
      "Package": "rmarkdown",
      "Version": "2.26",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "bslib",
        "evaluate",
        "fontawesome",
        "htmltools",
        "jquerylib",
        "jsonlite",
        "knitr",
        "methods",
        "tinytex",
        "tools",
        "utils",
        "xfun",
        "yaml"
      ],
      "Hash": "9b148e7f95d33aac01f31282d49e4f44"
    },
    "rprojroot": {
      "Package": "rprojroot",
      "Version": "2.0.4",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R"
      ],
      "Hash": "4c8415e0ec1e29f3f4f6fc108bef0144"
    },
    "rstudioapi": {
      "Package": "rstudioapi",
      "Version": "0.16.0",
      "Source": "Repository",
      "Repository": "CRAN",
      "Hash": "96710351d642b70e8f02ddeb237c46a7"
    },
    "sass": {
      "Package": "sass",
      "Version": "0.4.9",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R6",
        "fs",
        "htmltools",
        "rappdirs",
        "rlang"
      ],
      "Hash": "d53dbfddf695303ea4ad66f86e99b95d"
    },
    "scales": {
      "Package": "scales",
      "Version": "1.2.1",
      "Source": "Repository",
      "Repository": "RSPM",
      "Requirements": [
        "R",
        "R6",
        "RColorBrewer",
        "farver",
        "labeling",
        "lifecycle",
        "munsell",
        "rlang",
        "viridisLite"
      ],
      "Hash": "906cb23d2f1c5680b8ce439b44c6fa63"
    },
    "shiny": {
      "Package": "shiny",
      "Version": "1.7.4",
      "Source": "Repository",
      "Repository": "RSPM",
      "Requirements": [
        "R",
        "R6",
        "bslib",
        "cachem",
        "commonmark",
        "crayon",
        "ellipsis",
        "fastmap",
        "fontawesome",
        "glue",
        "grDevices",
        "htmltools",
        "httpuv",
        "jsonlite",
        "later",
        "lifecycle",
        "methods",
        "mime",
        "promises",
        "rlang",
        "sourcetools",
        "tools",
        "utils",
        "withr",
        "xtable"
      ],
      "Hash": "c2eae3d8c670fa9dfa35a12066f4a1d5"
    },
    "shinyWidgets": {
      "Package": "shinyWidgets",
      "Version": "0.8.6",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "anytime",
        "bslib",
        "grDevices",
        "htmltools",
        "jsonlite",
        "rlang",
        "sass",
        "shiny"
      ],
      "Hash": "bc918b6911c4e928e24a9928295de834"
    },
    "shinyalert": {
      "Package": "shinyalert",
      "Version": "3.1.0",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "htmltools",
        "shiny",
        "uuid"
      ],
      "Hash": "45f99f3173e5513e2dec78dc4d63f9f0"
    },
    "shinycssloaders": {
      "Package": "shinycssloaders",
      "Version": "1.0.0",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "digest",
        "glue",
        "grDevices",
        "shiny"
      ],
      "Hash": "f39bb3c44a9b496723ec7e86f9a771d8"
    },
    "shinyjs": {
      "Package": "shinyjs",
      "Version": "2.1.0",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "digest",
        "jsonlite",
        "shiny"
      ],
      "Hash": "802e4786b353a4bb27116957558548d5"
    },
    "shinyscreenshot": {
      "Package": "shinyscreenshot",
      "Version": "0.2.1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "base64enc",
        "htmltools",
        "jsonlite",
        "shiny",
        "uuid"
      ],
      "Hash": "4c8b592813a54437e82a626cc7553e59"
    },
    "sourcetools": {
      "Package": "sourcetools",
      "Version": "0.1.7-1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R"
      ],
      "Hash": "5f5a7629f956619d519205ec475fe647"
    },
    "stringi": {
      "Package": "stringi",
      "Version": "1.8.3",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "stats",
        "tools",
        "utils"
      ],
      "Hash": "058aebddea264f4c99401515182e656a"
    },
    "stringr": {
      "Package": "stringr",
      "Version": "1.5.1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "cli",
        "glue",
        "lifecycle",
        "magrittr",
        "rlang",
        "stringi",
        "vctrs"
      ],
      "Hash": "960e2ae9e09656611e0b8214ad543207"
    },
    "sys": {
      "Package": "sys",
      "Version": "3.4.2",
      "Source": "Repository",
      "Repository": "CRAN",
      "Hash": "3a1be13d68d47a8cd0bfd74739ca1555"
    },
    "tibble": {
      "Package": "tibble",
      "Version": "3.2.1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "fansi",
        "lifecycle",
        "magrittr",
        "methods",
        "pillar",
        "pkgconfig",
        "rlang",
        "utils",
        "vctrs"
      ],
      "Hash": "a84e2cc86d07289b3b6f5069df7a004c"
    },
    "tidyr": {
      "Package": "tidyr",
      "Version": "1.3.1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "cli",
        "cpp11",
        "dplyr",
        "glue",
        "lifecycle",
        "magrittr",
        "purrr",
        "rlang",
        "stringr",
        "tibble",
        "tidyselect",
        "utils",
        "vctrs"
      ],
      "Hash": "915fb7ce036c22a6a33b5a8adb712eb1"
    },
    "tidyselect": {
      "Package": "tidyselect",
      "Version": "1.2.1",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "cli",
        "glue",
        "lifecycle",
        "rlang",
        "vctrs",
        "withr"
      ],
      "Hash": "829f27b9c4919c16b593794a6344d6c0"
    },
    "timechange": {
      "Package": "timechange",
      "Version": "0.3.0",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "cpp11"
      ],
      "Hash": "c5f3c201b931cd6474d17d8700ccb1c8"
    },
    "tinytex": {
      "Package": "tinytex",
      "Version": "0.50",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "xfun"
      ],
      "Hash": "be7a76845222ad20adb761f462eed3ea"
    },
    "tzdb": {
      "Package": "tzdb",
      "Version": "0.4.0",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "cpp11"
      ],
      "Hash": "f561504ec2897f4d46f0c7657e488ae1"
    },
    "utf8": {
      "Package": "utf8",
      "Version": "1.2.4",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R"
      ],
      "Hash": "62b65c52671e6665f803ff02954446e9"
    },
    "uuid": {
      "Package": "uuid",
      "Version": "1.2-0",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R"
      ],
      "Hash": "303c19bfd970bece872f93a824e323d9"
    },
    "vctrs": {
      "Package": "vctrs",
      "Version": "0.6.5",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "cli",
        "glue",
        "lifecycle",
        "rlang"
      ],
      "Hash": "c03fa420630029418f7e6da3667aac4a"
    },
    "viridisLite": {
      "Package": "viridisLite",
      "Version": "0.4.2",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R"
      ],
      "Hash": "c826c7c4241b6fc89ff55aaea3fa7491"
    },
    "withr": {
      "Package": "withr",
      "Version": "3.0.0",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "grDevices",
        "graphics"
      ],
      "Hash": "d31b6c62c10dcf11ec530ca6b0dd5d35"
    },
    "xfun": {
      "Package": "xfun",
      "Version": "0.43",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "grDevices",
        "stats",
        "tools"
      ],
      "Hash": "ab6371d8653ce5f2f9290f4ec7b42a8e"
    },
    "xml2": {
      "Package": "xml2",
      "Version": "1.3.6",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "cli",
        "methods",
        "rlang"
      ],
      "Hash": "1d0336142f4cd25d8d23cd3ba7a8fb61"
    },
    "xtable": {
      "Package": "xtable",
      "Version": "1.8-4",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "stats",
        "utils"
      ],
      "Hash": "b8acdf8af494d9ec19ccb2481a9b11c2"
    },
    "yaml": {
      "Package": "yaml",
      "Version": "2.3.8",
      "Source": "Repository",
      "Repository": "CRAN",
      "Hash": "29240487a071f535f5e5d5a323b7afbd"
    }
  }
}
```

## Si repites mucho código en Shiny para crear bloques de HTML, lo estás haciendo mal

```{r}
#| label: pinkipie
#| echo: false
#| eval: true
fs::dir_tree("C:/Users/Leonardo.Hansa/Documents/tools/pinkiepie/inst/shinyApp/ui/")
```
## Esos códigos forman parte de una Shiny app que genera como este...

![](img/pinkipie-area.PNG)

## ...y este

![](img/pinkipie-line.PNG)

## El código del primero es este...

```{r}
#| label: areaplot
tabItem(
        tabName = "areaplot",

        # Settings ---------------------------------------------------------------------------------

        fluidRow(
                SaveLoadSettingsUI(id = "area")
        ),

        # Formating --------------------------------------------------------------------------------

        fluidRow(
                column(
                        width = 4,
                        tabBox(
                                title = "Formatting",
                                height = "300px",
                                width = NULL,
                                side = "right",
                                tabPanel(
                                        title = "Axis",
                                        FormatingAxisUI(
                                                id = "area",
                                                period = "1 month"
                                        )
                                ),

                                # Labels -------------------------------------------------------------

                                tabPanel(
                                        title = "Labels/Legend",
                                        FormatingLabelsUI(
                                                id = "area",
                                                rot = -90
                                        )
                                ),
                                tabPanel(
                                        title = "Text Size",
                                        FormatingTextUI(
                                                id = "area",
                                                axis_val = 14,
                                                label_val = 14,
                                                legend_val = 12
                                        )
                                ),

                                # Colours ------------------------------------------------------------
                                tabPanel(
                                        title = "Colours",
                                        FormatingColoursUI(
                                                id = "area"
                                        )
                                )
                        )
                ),

                # Variables ------------------------------------------------------------------------


                column(
                        width = 5,
                        tabBox(
                                title = "Select Variables",
                                height = "300px",
                                width = NULL,
                                side = "right",
                                tabPanel(
                                        title = "Variables",
                                        fluidRow(
                                                column(
                                                        width = 3,
                                                        uiOutput("DateRange_Area"),
                                                        uiOutput("PlotVar_Area"),
                                                        uiOutput("topn_area")
                                                ),
                                                column(
                                                        width = 3,
                                                        uiOutput("GroupBy_Area"),
                                                        uiOutput("FacetBy_Area"),
                                                        uiOutput("FacetBy_Subset_Area")
                                                ),
                                                column(
                                                        width = 3,
                                                        uiOutput("GroupByLevels_Area"),
                                                        uiOutput("FacetByLevels_Area"),
                                                        uiOutput("FacetByLevels_Subset_Area")
                                                ),
                                                column(
                                                        width = 3,
                                                        uiOutput("ColourBy_Area"),
                                                        uiOutput("Facet_Transpose_Area")
                                                )
                                        )
                                )
                        )
                ),



                # Chart Settings -------------------------------------------------------------------


                column(
                        width = 3,
                        tabBox(
                                title = "Chart settings",
                                height = "300px",
                                width = NULL,
                                side = "right",
                                tabPanel(
                                        title = "Plot parameters",
                                        fluidRow(
                                                column(
                                                        width = 6,
                                                        prettyCheckbox(
                                                                inputId = "y_axis_free_area",
                                                                label = "Free Y axis",
                                                                value = FALSE,
                                                                status = "success",
                                                                shape = "round",
                                                                outline = TRUE
                                                        ),
                                                        prettyCheckbox(
                                                                inputId = "bars_area",
                                                                label = "Bar chart",
                                                                value = FALSE,
                                                                status = "success",
                                                                shape = "round",
                                                                outline = TRUE
                                                        ),
                                                        prettyCheckbox(
                                                                inputId = "order_area",
                                                                label = "Order by size",
                                                                value = TRUE,
                                                                status = "success",
                                                                shape = "round",
                                                                outline = TRUE
                                                        ),
                                                        sliderInput(
                                                                inputId = "alpha_area",
                                                                label = "Transparency",
                                                                min = 0,
                                                                max = 1,
                                                                value = 1,
                                                                step = 0.05
                                                        )
                                                ),
                                                column(
                                                        width = 6,
                                                        prettyCheckbox(
                                                                inputId = "grid_lines_area",
                                                                label = "Grid lines",
                                                                value = TRUE,
                                                                status = "success",
                                                                shape = "round",
                                                                outline = TRUE
                                                        ),
                                                        prettyCheckbox(
                                                                inputId = "remove_legend_area",
                                                                label = "Remove legend",
                                                                value = FALSE,
                                                                status = "success",
                                                                shape = "round",
                                                                outline = TRUE
                                                        ),
                                                        prettyCheckbox(
                                                                inputId = "border_area",
                                                                label = "Add border",
                                                                value = FALSE,
                                                                status = "success",
                                                                shape = "round",
                                                                outline = TRUE
                                                        ),
                                                        prettyCheckbox(
                                                                inputId = "auto_format_area",
                                                                label = "Auto formatting",
                                                                value = TRUE,
                                                                status = "success",
                                                                shape = "round",
                                                                outline = TRUE
                                                        )
                                                )
                                        )
                                ),


                                # Save plot ----------------------------------------------------------


                                tabPanel(
                                        title = "Dimensions & Save",
                                        fluidRow(
                                                DownloadPlot(
                                                        id = "area"
                                                )
                                        ),
                                        fluidRow(
                                                column(
                                                        width = 12,
                                                        textInput(
                                                                inputId = "title_area",
                                                                label = "Plot title",
                                                                value = ""
                                                        )
                                                )
                                        )
                                )
                        )
                )
        ),


        # Plot output ------------------------------------------------------------------------------


        plotlyOutput(
                outputId = "areaplot",
                height = "550px"
        ) %>%
                withSpinner(
                        type = 1,
                        color = "#00FFAE"
                )
)
```


## ...y el del segundo es este

```{r}
#| label: lineplot
tabItem(
       tabName = "lineplot",

       # Settings ---------------------------------------------------------------------------------

       fluidRow(
              SaveLoadSettingsUI(id = "line")
       ),

       # Formating --------------------------------------------------------------------------------

       fluidRow(
              column(
                     width = 3,
                     tabBox(
                            title = "Formatting",
                            height = "400px",
                            width = NULL,
                            side = "right",
                            tabPanel(
                                   title = "Axis",
                                   FormatingAxisUI(id = "line", period = "1 month"),
                            ),

                            # Labels -------------------------------------------------------------

                            tabPanel(
                                   title = "Labels/Legend",
                                   FormatingLabelsUI(id = "line", rot = -90)
                            ),
                            tabPanel(
                                   title = "Text Size",
                                   FormatingTextUI(id = "line")
                            ),

                            # Colours ------------------------------------------------------------

                            tabPanel(
                                   title = "Colours",
                                   FormatingColoursUI(id = "line")
                            )
                     )
              ),

              # Variables ------------------------------------------------------------------------


              column(
                     width = 7,
                     tabBox(
                            title = "Select Variables",
                            height = "400px",
                            width = NULL,
                            side = "right",
                            tabPanel(
                                   title = "Variables",
                                   fluidPage(
                                          fluidRow(
                                                 column(
                                                        width = 4,
                                                        uiOutput("DateRange_Line"),
                                                        uiOutput("PlotVar_Line"),
                                                        uiOutput("PlotVar_Line2")
                                                 ),
                                                 column(
                                                        width = 4,
                                                        uiOutput("ColourBy_Line"),
                                                        radioGroupButtons(
                                                               inputId = "agg_line_var1",
                                                               label = "Variable 1 Aggregation",
                                                               choices = c(
                                                                      "sum",
                                                                      "mean",
                                                                      "max",
                                                                      "min",
                                                                      "median"
                                                               ),
                                                               individual = TRUE,
                                                               checkIcon = list(
                                                                      yes = tags$i(
                                                                             class = "fa fa-check-square",
                                                                             style = "color: green"
                                                                      ),
                                                                      no = tags$i(
                                                                             class = "fa fa-square-o",
                                                                             style = "color: green"
                                                                      )
                                                               )
                                                        ),
                                                        radioGroupButtons(
                                                               inputId = "agg_line_var2",
                                                               label = "Variable 2 Aggregation",
                                                               choices = c(
                                                                      "sum",
                                                                      "mean",
                                                                      "max",
                                                                      "min",
                                                                      "median"
                                                               ),
                                                               individual = TRUE,
                                                               checkIcon = list(
                                                                      yes = tags$i(
                                                                             class = "fa fa-check-square",
                                                                             style = "color: green"
                                                                      ),
                                                                      no = tags$i(
                                                                             class = "fa fa-square-o",
                                                                             style = "color: green"
                                                                      )
                                                               )
                                                        )
                                                 ),
                                                 column(
                                                        width = 2,
                                                        uiOutput("GroupBy_Line"),
                                                        uiOutput("FacetBy_Line"),
                                                        uiOutput("FacetBy_Subset_Line")
                                                 ),
                                                 column(
                                                        width = 2,
                                                        uiOutput("GroupByLevels_Line"),
                                                        uiOutput("FacetByLevels_Line"),
                                                        uiOutput("FacetByLevels_Subset_Line"),
                                                        uiOutput("Facet_Transpose_Line")
                                                 )
                                          ),
                                          fluidRow(
                                                 prettyCheckbox(
                                                        inputId = "include_campaigns",
                                                        label = "Include Campaigns",
                                                        value = FALSE,
                                                        status = "success",
                                                        shape = "round",
                                                        outline = TRUE
                                                 ),
                                                 #
                                                 # tags$a(id = 'include_campaigns',
                                                 #        'Include Campaigns'),
                                                 hidden(
                                                        tags$div(
                                                               id = "campaigns_drop",
                                                               # class = 'row',
                                                               tags$div(
                                                                      class = "col-xs-4 text-center",
                                                                      # style = "display:inline-block;width:32%;text-align: center;",
                                                                      fileInput(
                                                                             inputId = "campaign_data",
                                                                             label = "Select Campaigns file",
                                                                             accept = ".csv",
                                                                             buttonLabel = "Browse"
                                                                      )
                                                               ),
                                                               tags$div(
                                                                      class = "col-xs-4 text-center",
                                                                      style = "display:inline;",
                                                                      actionButton(
                                                                             inputId = "reset_campaign",
                                                                             label = "Reset Campaign input"
                                                                      )
                                                               ),
                                                               tags$div(
                                                                      class = "col-xs-4 text-center",
                                                                      # style = "display:inline-block;width:32%;text-align: center;",
                                                                      tags$h5(
                                                                             "To overlap campaigns periods
                                                                                          in the plot, must load a csv
                                                                                          containing the columns :",
                                                                             strong("Campaign"), ",",
                                                                             strong("WeekStart"), ",",
                                                                             strong("WeekEnd")
                                                                      )
                                                               )
                                                        )
                                                 )
                                          )
                                   )
                            )
                     )
              ),

              # Chart Settings ------------------------------------------------------------------------------


              column(
                     width = 2,
                     tabBox(
                            title = "Chart settings",
                            height = "400px",
                            width = NULL,
                            side = "right",
                            tabPanel(
                                   title = "Plot parameters",
                                   fluidRow(
                                          column(
                                                 width = 6,
                                                 prettyCheckbox(
                                                        inputId = "y_axis_free_line",
                                                        label = "Free Y axis",
                                                        value = FALSE,
                                                        status = "success",
                                                        shape = "round",
                                                        outline = TRUE
                                                 ),
                                                 prettyCheckbox(
                                                        inputId = "grid_lines_line",
                                                        label = "Grid lines",
                                                        value = TRUE,
                                                        status = "success",
                                                        shape = "round",
                                                        outline = TRUE
                                                 ),
                                                 prettyCheckbox(
                                                        inputId = "sec_axis_line",
                                                        label = "Second axis",
                                                        value = FALSE,
                                                        status = "success",
                                                        shape = "round",
                                                        outline = TRUE
                                                 )
                                          ),
                                          column(
                                                 width = 6,
                                                 prettyCheckbox(
                                                        inputId = "remove_legend_line",
                                                        label = "Remove legend",
                                                        value = FALSE,
                                                        status = "success",
                                                        shape = "round",
                                                        outline = TRUE
                                                 ),
                                                 prettyCheckbox(
                                                        inputId = "border_line",
                                                        label = "Add border",
                                                        value = FALSE,
                                                        status = "success",
                                                        shape = "round",
                                                        outline = TRUE
                                                 ),
                                                 prettyCheckbox(
                                                        inputId = "auto_format_line",
                                                        label = "Auto formatting",
                                                        value = TRUE,
                                                        status = "success",
                                                        shape = "round",
                                                        outline = TRUE
                                                 )
                                          )
                                   ),
                                   fluidRow(
                                          column(
                                                 width = 12,
                                                 textInput("title_line",
                                                        label = "Plot title",
                                                        value = ""
                                                 )
                                          )
                                   )
                            ),




                            # Save plot ----------------------------------------------------------


                            tabPanel(
                                   title = "Dimensions & Save",
                                   DownloadPlot(id = "line")
                            )
                     )
              )
       ),


       # Plot Output ------------------------------------------------------------------------------


       plotlyOutput("lineplot", height = "500px") %>%
              withSpinner(type = 1, color = "#00FFAE")
)
```

## ¿Solución? Usa Shiny modules, funciones que reutilizas

```{r}
#| label: server-con-modules
   mod_mediaplot_server(
    "dashboard_plot",
    mediaDB,
    dates_media$min_date,
    dates_media$max_date,
    dates_media$date_agg,
    variables_media$group1,
    variables_media$group1_level,
    variables_media$metric,
    variables_media$top_cat,
    data_down = isolate(settings()$`Allow Data Downloads`)
  )

  mod_mediaplot_server(
    "line_plot",
    mediaDB,
    dates_media$min_date,
    dates_media$max_date,
    dates_media$date_agg,
    variables_media$group1,
    variables_media$group1_level,
    variables_media$metric,
    variables_media$top_cat,
    data_down = isolate(settings()$`Allow Data Downloads`)
  )

  mod_mediaplot_server(
    "yoy_plot",
    mediaDB,
    dates_media$min_date,
    dates_media$max_date,
    dates_media$date_agg,
    variables_media$group1,
    variables_media$group1_level,
    variables_media$metric,
    variables_media$top_cat,
    data_down = isolate(settings()$`Allow Data Downloads`)
  )

  mod_mediaplot_server(
    "treemap_plot",
    mediaDB,
    dates_media$min_date,
    dates_media$max_date,
    dates_media$date_agg,
    variables_media$group1,
    variables_media$group1_level,
    variables_media$metric,
    variables_media$top_cat,
    data_down = isolate(settings()$`Allow Data Downloads`)
  )
```


## Los módulos son funciones con elementos especiales de Shiny
```{r}
#| label: el-modulo
mod_mediaplot_server <- function(id,
                                 data,
                                 min_date,
                                 max_date,
                                 date_agg,
                                 group1,
                                 group1_levels,
                                 metric,
                                 top_cat,
                                 data_down) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns

    plotData_media <- reactive({
      req(min_date())
      req(max_date())
      req(date_agg())
      req(group1())
      req(group1_levels())
      req(metric())

      CreateMediaPlotData(
        data(),
        min_date(),
        max_date(),
        date_agg(),
        group1(),
        group1_levels(),
        metric(),
        top_cat()
      )
    })


    output$media_area <- echarts4r::renderEcharts4r({
      validate(
        need(length(plotData_media()$data1[["Category2"]]) > 0, ""),
        need(nrow(plotData_media()$data1) > 0, "Date Aggregation not available for selected date range")
      )

      AreaPlotMedia(plotData_media()$data1, y_lab = metric(), type = "area")
    })

    output$media_yoy <- echarts4r::renderEcharts4r({
      validate(
        need(length(plotData_media()$data2[["Category2"]]) > 0, "")
      )

      YOYPlotMedia(plotData_media()$data2, y_lab = metric())
    })

    output$media_donut <- echarts4r::renderEcharts4r({
      validate(
        need(length(plotData_media()$data3[["Category2"]]) > 0, "")
      )

      DonutPlotMedia(plotData_media()$data3, y_lab = metric())
    })

    output$media_treemap <- echarts4r::renderEcharts4r({
      validate(
        need(length(plotData_media()$data3[["Category2"]]) > 0, "")
      )

      TreeMapPlotMedia(plotData_media()$data4, ylab = metric())
    })


    output$media_line <- echarts4r::renderEcharts4r({
      validate(
        need(length(plotData_media()$data1[["Category2"]]) > 0, ""),
        need(nrow(plotData_media()$data1) > 0, "Date Aggregation not available for selected date range")
      )

      if (input$bar_view) {
        AreaPlotMedia(plotData_media()$data1, y_lab = metric(), type = "area")
      } else {
        AreaPlotMedia(plotData_media()$data1, y_lab = metric(), type = "line")
      }
    })

    data_down_media <- reactive({
      if (id %in% c("dashboard_plot", "line_plot")) {
        plotData_media()$data1 %>%
          tidyr::pivot_wider(
            names_from = Category2,
            values_from = Metric,
            values_fill = 0
          )
      } else if (id == "yoy_plot") {
        plotData_media()$data2 %>%
          rename(Group = Category2)
      } else if (id == "treemap_plot") {
        plotData_media()$data4
      }
    })

    mod_download_buttons_server(
      "download_data_media",
      data = data_down_media,
      name = id,
      screen_id = id,
      data_down1 = data_down
    )
  })
}
```



# Qué echo en falta

## Quarto

![](img/quarto.PNG)

# leonardohansa.com/rquixote {.unnumbered .unlisted .custom-title}
